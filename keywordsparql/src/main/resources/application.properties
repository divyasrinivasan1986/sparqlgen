#spring.session.store-type=REDIS # Session store type.
##server.servlet.session.timeout= 1000000 # Session timeout. If a duration suffix is not specified, seconds will be used.
#spring.session.redis.flush-mode=on-save # Sessions flush mode.
#spring.session.redis.namespace=spring:session # Namespace for keys used to store sessions.
#spring.redis.host=localhost # Redis server host.
#spring.redis.password= # Login password of the redis server.
#spring.redis.port=6379
#Define as many prefix as you want in below specific format.
prefix1.name=owl
prefix1.url=http://www.w3.org/2002/07/owl#
prefix2.name=xsd
prefix2.url=http://www.w3.org/2001/XMLSchema#
prefix3.name=rdf
prefix3.url=http://www.w3.org/1999/02/22-rdf-syntax-ns#
prefix4.name=rdfs
prefix4.url=http://www.w3.org/2000/01/rdf-schema#
prefix5.name=vrank
prefix5.url=http://purl.org/voc/vrank#

#Select statements for entity property and class. Customize if required.Else code will execute below by default.
#Of course this is configurable by Rest interfaces and would be supported.
entity.whereclause=SELECT DISTINCT ?key1 ?key2 WHERE{ \n \
					?key1 a owl:Thing . ?key1 rdfs:label ?key2 .}
#Property
property.whereclause=SELECT DISTINCT ?key1 ?key2  (COUNT(*)AS ?v) WHERE {\n \
					 ?key1 a rdf:Property;\n rdfs:label ?key2.\n } \
					 GROUP BY ?key1 ?key2 \n ORDER BY DESC(?v)
#class
class.whereclause=SELECT DISTINCT ?key1 ?key2 WHERE {\n \
					?key1 a owl:Class .\n ?key1 rdfs:label ?key2 .\n }